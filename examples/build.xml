<project name="bixo-examples" default="test">

	<!--
	 Copyright 2009-2012 Scale Unlimited

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	     http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	-->

	<property name="root.dir" value="${basedir}" />
	<property file="${root.dir}/build.properties" />

	<!-- ================================================================== -->
	<!-- General cleaning sources                                           -->
	<!-- ================================================================== -->

	<target name="clean" description="--> clean the project">
		<echo>cleaning ${ant.project.name}</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" excludes="classes-*-eclipse/" />
		</delete>
	</target>


	<!-- ================================================================== -->
	<!-- Maven                                                              -->
	<!-- ================================================================== -->

<target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
	<path id="maven.ant.tasks.classpath" path="${lib.dir}/maven-ant-tasks-2.0.10.jar" />
	
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
        classpathref="maven.ant.tasks.classpath"/>
        
    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
        <isset property="maven.repo.local"/>
    </condition>
    <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
    <artifact:pom file="pom.xml" id="maven.project"/>
    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
        <pom refid="maven.project"/>
        <localRepository refid="local.repository"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
        <pom refid="maven.project"/>
        <localRepository refid="local.repository"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
        <pom refid="maven.project"/>
        <localRepository refid="local.repository"/>
    </artifact:dependencies>
</target>

	
	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="compile"
	        depends="mvn-init"
	        description="--> compile main classes">
		<mkdir dir="${build.dir.main-classes}" />
		<javac encoding="${build.encoding}"
		       srcdir="${main.src.dir}"
		       includes="**/*.java"
		       destdir="${build.dir.main-classes}"
		       debug="${javac.debug}"
		       optimize="${javac.optimize}"
		       target="${javac.version}"
		       source="${javac.version}"
		       deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="compile.classpath" />
		</javac>
	</target>


	<!-- ================================================================== -->
	<!-- Unit Tests                                                         -->
	<!-- ================================================================== -->

	<target name="compile-test" depends="compile">
		<echo>*** Building Unit Tests Sources ***</echo>
		<mkdir dir="${build.dir.test-classes}" />
		<path id="test.path">
			<pathelement location="${build.dir.main-classes}" />
		</path>

		<javac encoding="${build.encoding}"
		       srcdir="${test.src.dir}"
		       includes="**/*.java"
		       destdir="${build.dir.test-classes}"
		       debug="${javac.debug}"
		       optimize="${javac.optimize}"
		       target="${javac.version}"
		       source="${javac.version}"
		       deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.classpath" />
			<classpath refid="test.path" />
		</javac>
	</target>

	<target name="test"
		    depends="compile-test"
			description="--> run unit tests">
		<delete dir="${build.dir.test-reports}" />
		<mkdir dir="${build.dir.test-reports}" />

		<junit showoutput="false"
		       printsummary="yes"
		       haltonfailure="no"
		       fork="yes"
		       maxmemory="256m"
		       dir="${basedir}"
		       errorProperty="tests.failed"
		       failureProperty="tests.failed">
			<classpath>
				<pathelement location="${build.dir.main-classes}" />
				<pathelement location="${build.dir.test-classes}" />
				<pathelement location="${main.res.dir}" />
				<pathelement location="${test.res.dir}" />
				<path refid="test.classpath" />
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes"
			           todir="${build.dir.test-reports}"
			           unless="testcase">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" unless="testcase" />
					<exclude name="**/Abstract*.java" unless="testcase" />
					<exclude name="**/ExtendedTestCase.java"
					         unless="testcase" />
					<include name="${testcase}" if="testcase" />
				</fileset>
			</batchtest>
			<batchtest fork="yes"
			           todir="${build.dir.test-reports}"
			           if="testcase">
				<fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>
		<fail if="tests.failed">Unit tests failed!</fail>
	</target>


	<!-- ================================================================== -->
	<!-- Multi target build                                                -->
	<!-- ================================================================== -->

	<target name="test-all"
			depends="test"
			description="--> run all tests">
	</target>

	<target name="compile-all"
			depends="compile, compile-test"
			description="--> compile all files including tests">
	</target>

	<!-- ================================================================== -->
	<!-- Build jar of sources                                               -->
	<!-- ================================================================== -->

	<target name="jar" depends="compile">

		<tstamp>
			<format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
		</tstamp>

		<jar jarfile="${build.dir}/${jar.name}"
		     basedir="${build.dir.main-classes}">
			<fileset dir="${main.res.dir}" />
			<manifest>
				<section name="examples">
					<attribute name="Implementation-Vendor"
					           value="openbixo.org" />
					<attribute name="Implementation-Title"
					           value="${ant.project.name}" />
					<attribute name="Implementation-Version"
					           value="${version}" />
					<attribute name="Compile-Time" value="${timestamp}" />
					<attribute name="Compiled-By" value="${user.name}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!-- ================================================================== -->
	<!-- Hadoop job jar                                                     -->
	<!-- ================================================================== -->

	<target name="job"
	        depends="compile"
	        description="--> create a Hadoop ready jar with all dependencies">

		<!-- Make sure lib/ dir starts out empty, so we don't get multiple
		     copies of jars with slightly different versions
		 -->
		<delete dir="${build.dir}/lib" />
		<mkdir dir="${build.dir}/lib" />

		<copy todir="${build.dir}/lib" flatten="true">
			<path refid="runtime.classpath" />
		</copy>

		<jar destfile="${build.dir}/${job.name}" compress="true">
			<fileset dir="${build.dir.main-classes}" />
			<fileset dir="${main.res.dir}" />
			<fileset dir="${build.dir}" includes="lib/" />
		</jar>
        <delete file="${fbdest.dir}/${fbjob.name}" />
        <copy file="${build.dir}/${job.name}" toFile="${fbdest.dir}/${fbjob.name}" />
    </target>


	<!-- ================================================================== -->
	<!-- Generating eclipse file                                            -->
	<!-- ================================================================== -->

	<target name="eclipse"
		depends="mvn-init, clean-eclipse"
		description="--> create the Eclipse project files">

		<taskdef name="eclipse"
		         classname="prantl.ant.eclipse.EclipseTask"
		         classpathref="compile.classpath" />
		<mkdir dir="${build.dir.main-classes-eclipse}" />
		<mkdir dir="${build.dir.test-classes-eclipse}" />

		<eclipse>
			<settings>
				<jdtcore compilercompliance="6.0" />
				<resources encoding="UTF-8" />
			</settings>
			<project name="${ant.project.name}" />
			<classpath>
				<container path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" />

				<source path="${main.src.dir}"
				        output="${build.dir.main-classes-eclipse}" />

				<!-- TODO use build.properties (with more consistent names) for these paths -->
				<source path="${basedir}/src/main/resources"
				        output="${build.dir.main-classes-eclipse}" />
				<source path="${basedir}/src/test/java"
				        output="${build.dir.test-classes-eclipse}" />
				<source path="${basedir}/src/test/resources"
				        output="${build.dir.test-classes-eclipse}" />

				<output path="${build.dir.main-classes-eclipse}" />
				<library pathref="test.classpath" exported="false" />
			</classpath>
		</eclipse>

		<concat destfile="${root.dir}/.settings/org.eclipse.jdt.core.prefs"
		        append="true">
			<filelist dir="${root.dir}/doc/" files="eclipse-formatter.properties" />
		</concat>
	</target>

	<target name="clean-eclipse"
	        description="--> clean the Eclipse project files">
		<delete file=".classpath" />
		<delete file=".eclipse" />
		<delete file=".project" />
		<delete dir=".settings" />
	</target>

	<!-- ================================================================== -->
	<!-- Distribution help                                                  -->
	<!-- ================================================================== -->
	<target name="runtime" 
			depends="mvn-init"
	        description="--> set up runtime lib directory used when building the distribution">
		<delete file="${build.dir}/runtime" />
		<copy todir="${build.dir}/runtime" flatten="true">
			<path refid="runtime.classpath" />
		</copy>
	</target>

</project>
